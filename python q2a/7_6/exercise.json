{
    "id": 6, 
    "description": "Prende in input un insieme di stringhe, ognuna rappresenta un percorso foglia-radice in un albero binario, dove ogni nodo contiene una lettera, ritorna l'albero binario", 
    "text": "\n    Es 12: 7 punti\n    Si definisca la funzione es12(testo) ricorsiva (o che fa uso di funzioni o metodi ricorsive/i) che:\n    - riceve come argomento:\n        - un insieme di stringhe che hanno la propriet\u00e0 che ciascuna \u00e8 stata ottenuta a partire dallo stesso albero binario\n          (in cui ciascun nodo contiene un solo carattere), risalendo da ciascuna foglia fino alla radice e concatenando\n          i valori dei nodi\n          NOTA l'albero \u00e8 localmente ordinato da sinistra a destra, ovvero:\n            - ciascun figlio sinistro contiene un carattere minore di quello del padre\n            - ciascun figlio destro contiene un carattere maggiore di quello del padre\n    - ricostruisce l'albero originale e lo torna come risultato\n\n    Esempio: se l'albero da ricostruire \u00e8\n                               i                    |\n                            /      \\                |\n                        h              m            |\n                    /     \\          /    \\         |\n                c           j       k       p       |\n               /  \\       /   \\            /  \\     |\n            a       f   g      k          m    q    |\n\n    L'insieme di stringhe \u00e8\n       { 'achi', 'qpmi', 'gjhi', 'fchi', 'mpmi', 'kmi', 'kjhi' }\n\n    ATTENZIONE: \u00e8 VIETATO usare i metodi della classe AlberoBinario\n\n    ", 
    "algorithm": "definisci una nuova funzione contructPath(root, pathStr):\n\tprende l'ultimo carattere di path string e lo salva in lastChar\n\tse la stringa è vuota:\n\t\tritorna root\n\tse lastChar è maggiore del valore di root:\n\t\tse root non ha filgio destro:\n\t\t\tcrea un nuovo AlberoBinario con valore lastChar e inseriscilo come figlio destro di root\n\t\t\tchiama contructPath(figlio destro di root, pathStr meno l'ultimo carattere)\n\t\taltrimenti:\n\t\t\tchiama contructPath(figlio destro di root, pathStr meno l'ultimo carattere)\n\tse lastChar è minore del valore di root\n\t\tse root non ha figlio sinistro:\n\t\t\tcrea un nuovo AlberoBinario con valore lastChar e impostalo come figlio sinistro di root\n\t\t\tchiama contructPath(figlio sinistro di root, pathStr meno l'ultimo carattere\n\t\taltrimenti:\n\t\t\tchiama contructPath(figlio sinistro di root, pathStr meno l'ultimo carattere\n\tritorna root\n\n\n\nes6(percorsi):\n\ttransforma persorsi in una lista\n\tcrea la radice dell'albero con l'ultimo carattere di una delle stringhe\n\tper ogni stringa della lista:\n\t\tsalva nella radice il risultato della chiamata a contructPath(radice, stringa meno l'ultimo carattere\n\tritorna la radice", 
    "tags": ["Alberi", "Ricorsione", "Stringhe"], 
    "effort": 7,
    "clues": [],
    "from":"esame-7-11-18"
}